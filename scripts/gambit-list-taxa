#!/usr/bin/env python3
import argparse
import sqlite3

parser = argparse.ArgumentParser(
    description = 'List the taxa in a gambit database',
    usage = 'gambit-list-taxa [options]',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

# Required input files
parser.add_argument('database_main_filename', help='A database .gdb file created by gambit build', type=str)

parser.add_argument('--rank', '-r', help='taxonomic rank (genus/species)', default = 'species', type=str)
parser.add_argument('--extended', '-e', action='store_true', help='Extended output', default = False)

parser.add_argument('--verbose', '-v', action='store_true', help='Turn on verbose output', default = False)
options = parser.parse_args()

# Connect to the database
main_db_connection = sqlite3.connect(options.database_main_filename)

if options.extended:
    # join the genome_annotations table and the taxa table and count the number of rows in genome_annotations where the genome_annotaitons.taxon_id = taxa.id
    taxa = [row for row in main_db_connection.execute("SELECT taxa.key,taxa.name,taxa.distance_threshold,COUNT(genome_annotations.taxon_id), taxa.id FROM taxa LEFT JOIN genome_annotations ON genome_annotations.taxon_id = taxa.id WHERE taxa.rank LIKE '"+ options.rank+"' GROUP BY taxa.key ORDER BY taxa.name ASC")]
    print('Species\tDistance threshold\tNo. Genomes\tNo. Child taxa\tCuration version')
    for t in taxa:
        # the original manually curated database entries have ncbi/taxonomy/xxx or genbank/refseq-curated/xxx
        # whilst the automated ones from GTDB have a uuid 73a13525-4fb3-4da7-9f16-fda91bbfbea5
        curation_version = 'GTDB'
        if '/' in t[0]:
            curation_version = 'Original'

        # Check to see if there are any children of this taxon. We wont go through the whole tree, just one level.
        children = [row for row in main_db_connection.execute("SELECT taxa.key,taxa.name,taxa.distance_threshold,COUNT(genome_annotations.taxon_id) FROM taxa LEFT JOIN genome_annotations ON genome_annotations.taxon_id = taxa.id WHERE taxa.parent_id = "+str(t[4])+" GROUP BY taxa.id ORDER BY taxa.name ASC")]
        if len(children) > 0:
            genomes_total = t[3] + sum([c[3] for c in children])
            print(str(t[1]) + '\t' + str(t[2]) + '\t' + str(genomes_total) + '\t' + str(len(children)) + '\t' + curation_version)
        else:
            print(str(t[1]) + '\t' + str(t[2]) + '\t' + str(t[3])+ '\t' + '0' + '\t' + curation_version)
else:
    taxa = [row[0] for row in main_db_connection.execute("SELECT name FROM taxa WHERE rank LIKE '"+ options.rank+"'  ORDER BY name ASC")]
    for t in taxa:
        print(str(t))
