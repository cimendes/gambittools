#!/usr/bin/env python3
import sys
import argparse
import tempfile
import os
import numpy as np
import pandas as pd
import json
from gambit.sigs import load_signatures, dump_signatures, AnnotatedSignatures, SignatureList
from ete3 import Tree
import logging

# Set the QT_QPA_PLATFORM to linuxfb to avoid the "QXcbConnection: Could not connect to display" error
os.environ['QT_QPA_PLATFORM'] = 'linuxfb'

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def run_command(cmd):
    """Run a shell command and handle errors."""
    logging.info(f"Running command: {cmd}")
    ret = os.system(cmd)
    if ret != 0:
        logging.error(f"Command failed with exit code {ret}")
        sys.exit(1)

def pairwise_matrix(genome_signatures):
    in_gidxs = np.flatnonzero(genome_signatures.ids)
    filtered_src_ids = genome_signatures.ids[in_gidxs]
    filtered_src = genome_signatures[in_gidxs]

    matrix = np.zeros((len(filtered_src), len(filtered_src)))

    # Create a matrix of pairwise distances
    for i, genome1 in enumerate(filtered_src):
        for j, genome2 in enumerate(filtered_src):
            num_common_kmers = len(np.intersect1d(genome1, genome2))
            num_unique_kmers = len(genome1) - num_common_kmers + len(genome2) - num_common_kmers
            matrix[i, j] = num_unique_kmers
    
    return pd.DataFrame(matrix, index=filtered_src_ids, columns=filtered_src_ids)

def main(options):
    close_accessions = []

    with tempfile.TemporaryDirectory() as temp_dir:
        gambit_output = os.path.join(temp_dir, 'gambit_output.json')
        gambit_cmd = f"gambit -d {options.gambit_database_directory} query -o {gambit_output} -f archive {' '.join(options.assembly_filenames)}"
        run_command(gambit_cmd)

        with open(gambit_output, 'r') as f:
            data = json.load(f)

            closest_genomes_to_distance = {}
            for item in data['items']:
                closest_genomes_json = item['closest_genomes']
                close_accessions_one_genome = [g['genome']['key'] for g in closest_genomes_json]
                close_accessions.extend(close_accessions_one_genome)
                for g in closest_genomes_json:
                    closest_genomes_to_distance[g['genome']['key']] = g['distance']

            if options.verbose:
                logging.info("Closest genomes and their distances:")
                for genome, distance in closest_genomes_to_distance.items():
                    logging.info(f"{genome}\t{distance:.6f}")

        with tempfile.NamedTemporaryFile(suffix='.gs', delete=False) as input_genome_signatures_file, \
                tempfile.NamedTemporaryFile(suffix='.gs', delete=False) as filtered_genome_signatures_file:

            input_genome_signatures = input_genome_signatures_file.name
            filtered_genome_signatures = filtered_genome_signatures_file.name

            run_command(f"gambit signatures create -k 11 -p ATGAC -o {input_genome_signatures} {' '.join(options.assembly_filenames)}")

            with load_signatures(options.gambit_signatures_filename) as src:
                in_gidxs = np.flatnonzero(np.in1d(src.ids, close_accessions))
                filtered_src_ids = src.ids[in_gidxs]
                filtered_src = src[in_gidxs]
                out_sigs = AnnotatedSignatures(filtered_src, filtered_src_ids, src.meta)
                dump_signatures(filtered_genome_signatures, out_sigs)

            with load_signatures(filtered_genome_signatures) as main_sig, load_signatures(input_genome_signatures) as patch_sig:
                merged_src_ids = np.concatenate((main_sig.ids, patch_sig.ids))
                merged_src = SignatureList(main_sig)
                merged_src.extend(patch_sig)
                out_sigs = AnnotatedSignatures(merged_src, merged_src_ids, main_sig.meta)
                dump_signatures(options.signatures_output_filename, out_sigs)

                pairwise_values = pairwise_matrix(out_sigs)
                pairwise_values.to_csv(options.pairwise_output_filename, sep='\t')

            run_command(f"gambit tree -s {options.signatures_output_filename} -c {options.cpus} > {options.tree_output_filename}")

            os.remove(input_genome_signatures)
            os.remove(filtered_genome_signatures)

    tree = Tree(options.tree_output_filename)
    tree.set_outgroup(tree.get_midpoint_outgroup())
    tree.ladderize()

    for n in tree.traverse():
        n.img_style["size"] = 0
        n.img_style["fgcolor"] = "black"
        n.img_style["vt_line_color"] = "black"
        n.img_style["hz_line_color"] = "black"
        n.img_style["hz_line_width"] = 1
        n.img_style["vt_line_width"] = 1

        if n.is_leaf():
            n.img_style["size"] = 0

    tree.render(options.tree_image_output_filename, w=800, units="px", dpi=300)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Place a genome in context from the database',
        usage='gambit-context [options]',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('gambit_database_directory', help='/path/to/gambit/database', type=str)
    parser.add_argument('gambit_signatures_filename', help='/path/to/gambit/database/signatures_file.gs', type=str)
    parser.add_argument('assembly_filenames', help='Assemblies in FASTA format, can be gzipped', type=str, nargs='+')

    parser.add_argument('--signatures_output_filename', '-s', help='Output filename for genome signatures', default='merged_database.gs', type=str)
    parser.add_argument('--tree_output_filename', '-t', help='Output filename for tree (newick format)', default='genome_tree.nwk', type=str)
    parser.add_argument('--tree_image_output_filename', '-i', help='Output filename for tree image (png format)', default='genome_tree.png', type=str)
    parser.add_argument('--pairwise_output_filename', '-p', help='Output filename for pairwise matrix', default='pairwise.tsv', type=str)
    parser.add_argument('--cpus', '-c', help='Number of cpus to use', type=int, default=1)
    parser.add_argument('--verbose', '-v', action='store_true', help='Turn on verbose output', default=False)

    options = parser.parse_args()
    main(options)
